(ns tetris.logic-test
  (:require [clojure.test :refer :all]
            [lambdaisland.deep-diff2 :as ddiff]
            [tetris.logic :as logic]))

(defn tetrimino-to-coords [tetrimino]
  (->> tetrimino
       (map-indexed (fn [row-idx row]
                      (map (fn [col-idx]
                             [row-idx col-idx])
                           (keep-indexed (fn [idx elem] (when (pos? elem) idx)) row))))
       (reduce concat)))

(deftest tetrimino-to-coords-test
  (is (= [[0 0] [0 1] [1 1] [1 2]]
         (tetrimino-to-coords [[7 7 0]
                               [0 7 7]])))
  (is (= [[0 0] [0 1] [1 0] [1 1]]
         (tetrimino-to-coords [[2 2]
                               [2 2]])))
  (is (= [[0 0] [0 1] [1 1] [2 1]]
         (tetrimino-to-coords [[4 4]
                               [0 4]
                               [0 4]])))
  (is (= [[0 0] [0 1] [0 2] [0 3]]
         (tetrimino-to-coords [[1, 1, 1, 1]])))
  (is (= [[0 0] [1 0] [2 0] [3 0]]
         (tetrimino-to-coords [[1]
                               [1]
                               [1]
                               [1]]))))

(def tetrimino-shape-normalised-coords
  (reduce-kv
   (fn [acc type tetriminos]
     (assoc acc type (mapv tetrimino-to-coords tetriminos)))
   {}
   logic/tetrimino-shapes))

(defn- game-state-from-before-grid
  [test-grid]
  (let [game-grid (mapv (fn [row]
                          (mapv (fn [ev] (if (= ev *) 0 ev)) row)) test-grid)
        current-tetrimino-coords
        (->> test-grid
             flatten
             (keep-indexed (fn [idx elem] (when (= elem *) idx)))
             (mapv (fn [idx] [(unchecked-divide-int idx logic/visible-grid-width) (rem idx logic/visible-grid-width)])))
        row-offset (apply min (mapv first current-tetrimino-coords))
        col-offset (apply min (mapv second current-tetrimino-coords))
        player-row-col [(- row-offset logic/lead-in-grid-height) col-offset]
        normalised-tetrimino-coords (mapv (fn [[row col]]
                                            [(- row row-offset)
                                             (- col col-offset)]) current-tetrimino-coords)
        current-tetrimino-type (key (first (filter (fn [[_ tetriminos]]
                                                     ((set tetriminos) normalised-tetrimino-coords))
                                                   tetrimino-shape-normalised-coords)))
        current-tetrimino-idx (first (keep-indexed (fn [idx elem] (when (= elem normalised-tetrimino-coords) idx))
                                                   (get tetrimino-shape-normalised-coords
                                                        current-tetrimino-type)))]
    {:game-grid game-grid
     :current-tetrimino (get-in logic/tetrimino-shapes [current-tetrimino-type current-tetrimino-idx])
     :next-tetrimino (logic/random-tetrimino)
     :player-row-col player-row-col
     :game-status :game-status/playing
     :game-score 0}))

(deftest game-state-from-before-grid-test
  (testing "within empty game-grid context"
    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]]
            :current-tetrimino [[1]
                                [1]
                                [1]
                                [1]]
            :player-row-col [0 0]}
           (select-keys (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [* 0 0 0 0 0 0 0 0 0]
                                                      [* 0 0 0 0 0 0 0 0 0]
                                                      [* 0 0 0 0 0 0 0 0 0]
                                                      [* 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]])
                        [:game-grid :current-tetrimino :player-row-col])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]]
            :current-tetrimino [[7 7 0]
                                [0 7 7]]
            :player-row-col [2 3]}
           (select-keys (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 * * 0 0 0 0 0]
                                                      [0 0 0 0 * * 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]])
                        [:game-grid :current-tetrimino :player-row-col])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]]
            :current-tetrimino [[2 2]
                                [2 2]]
            :player-row-col [18 8]}
           (select-keys (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 * *]
                                                      [0 0 0 0 0 0 0 0 * *]])
                        [:game-grid :current-tetrimino :player-row-col]))))

  (testing "within partially populated game-grid context"
    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]]
            :current-tetrimino [[1]
                                [1]
                                [1]
                                [1]]
            :player-row-col [0 0]}
           (select-keys (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [* 1 1 1 0 0 0 0 0 0]
                                                      [* 1 1 1 0 0 0 0 0 0]
                                                      [* 1 1 1 0 0 0 0 0 0]
                                                      [* 1 1 1 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]
                                                      [2 2 2 2 0 0 0 0 0 0]])
                        [:game-grid :current-tetrimino :player-row-col])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 7 7 0 0 0 0 0 0 0]
                        [0 0 7 7 0 0 0 0 0 0]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]]
            :current-tetrimino [[7 7 0]
                                [0 7 7]]
            :player-row-col [2 3]}
           (select-keys (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 7 7 * * 0 0 0 0 0]
                                                      [0 0 7 7 * * 0 0 0 0]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]
                                                      [2 2 2 2 2 2 2 2 2 2]])
                        [:game-grid :current-tetrimino :player-row-col])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 2 2 0 0]
                        [0 0 0 0 0 0 2 2 0 0]]
            :current-tetrimino [[2 2]
                                [2 2]]
            :player-row-col [18 8]}
           (select-keys (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 0 0 0 0]
                                                      [0 0 0 0 0 0 2 2 * *]
                                                      [0 0 0 0 0 0 2 2 * *]])
                        [:game-grid :current-tetrimino :player-row-col])))))

(defmacro check-scenario
  [before->after events]
  (assert (= (count before->after) (+ tetris.logic/visible-grid-height tetris.logic/lead-in-grid-height)))
  (let [before-grid (mapv #(mapv (fn [x] (if (= x '*) '* x)) %)
                          (mapv (fn [row] (take-while #(not= % '->) row)) before->after))
        after-grid (mapv #(drop-while (fn [token] (not= token '->)) %) before->after)
        after-grid (mapv #(into [] (rest %)) after-grid)]
    `(is (= ~after-grid (let [actual# (logic/compose-current-tetrimino-into-game-grid
                                       (logic/handle-events (game-state-from-before-grid ~before-grid) ~events))]
                          (when (not= ~after-grid actual#)
                            (ddiff/pretty-print (ddiff/diff ~after-grid actual#)))
                          actual#)))))

(deftest moving-current-tetrimino-down-test
  #_(testing "within grid"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 * * 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 * * 0 0 0 0 0 0 -> 0 0 2 2 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 2 2 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::logic/move-down]))

  (testing "at bottom"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 * * * 0 0 0 0 -> 0 0 0 3 3 3 0 0 0 0]
      [0 0 0 0 * 0 0 0 0 0 -> 0 0 0 0 3 0 0 0 0 0]]
     [::logic/move-down])))

(deftest moving-current-tetrimino-horizontally-test
  (testing "basic positive test"
    (testing "moving left"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 * * * * 0 0 -> 0 0 1 1 1 1 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::logic/move-left
        ::logic/move-left]))

    (testing "moving right"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [* * * * 0 0 0 0 0 0 -> 0 0 1 1 1 1 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::logic/move-right
        ::logic/move-right])))

  (testing "cannot move into populated space"
    (testing "to the left"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 * 0 -> 0 0 0 0 0 0 0 0 4 0]
        [0 0 0 3 3 3 * * * 0 -> 0 0 0 3 3 3 4 4 4 0]
        [0 0 0 0 3 0 0 0 0 0 -> 0 0 0 0 3 0 0 0 0 0]]
       [::logic/move-left]))

    (testing "to the right"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 * 0 0 0 0 -> 0 0 0 0 0 4 0 0 0 0]
        [0 0 0 * * * 3 3 3 0 -> 0 0 0 4 4 4 3 3 3 0]
        [0 0 0 0 0 0 0 3 0 0 -> 0 0 0 0 0 0 0 3 0 0]]
       [::logic/move-right])))

  (testing "boundary limits"
    (testing "at rhs"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 * * * -> 0 0 0 0 0 0 0 3 3 3]
        [0 0 0 0 0 0 0 0 * 0 -> 0 0 0 0 0 0 0 0 3 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::logic/move-right]))

    (testing "at lhs"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [* * * 0 0 0 0 0 0 0 -> 3 3 3 0 0 0 0 0 0 0]
        [0 * 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::logic/move-left]))))

(deftest rotating-current-tetrmino-test
  (testing "when rotation requires horizontal repositioning"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 1 1 1 1]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
     [::logic/rotate]))

  (testing "when rotation requires vertical repositioning"
    (testing "in empty grid"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 3 0 0 0 0]
        [0 0 0 0 * * * 0 0 0 -> 0 0 0 0 3 3 0 0 0 0]
        [0 0 0 0 0 * 0 0 0 0 -> 0 0 0 0 0 3 0 0 0 0]]
       [::logic/rotate]))

    (testing "when adjacent to some peaks"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 3 0 0 0 0 0]
        [0 0 0 0 0 * 0 0 0 1 -> 0 0 0 0 3 3 0 0 0 1]
        [0 0 0 0 * * * 0 0 1 -> 0 0 0 0 3 0 0 0 0 1]
        [0 0 0 0 4 4 4 3 0 1 -> 0 0 0 0 4 4 4 3 0 1]
        [0 0 0 0 4 0 3 3 3 1 -> 0 0 0 0 4 0 3 3 3 1]
        [0 0 0 2 2 2 2 2 2 2 -> 0 0 0 2 2 2 2 2 2 2]
        [0 0 5 2 2 2 2 2 2 2 -> 0 0 5 2 2 2 2 2 2 2]
        [0 0 5 2 2 2 2 2 2 2 -> 0 0 5 2 2 2 2 2 2 2]
        [0 5 5 2 2 2 2 2 2 2 -> 0 5 5 2 2 2 2 2 2 2]]
       [::logic/rotate]))))

(deftest dropping-the-current-tetrmino-test
  (testing "when empty grid"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 * * * 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 * 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 3 3 3 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 3 0 0 0 0 0]]
     [::logic/drop]))

  (testing "basic peak test"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 * * * 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 4 4 4 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 4 0 0 0 0 0 0 0 0]
      [0 3 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
      [0 3 3 0 0 0 0 0 0 0 -> 0 3 3 0 0 0 0 0 0 0]
      [0 3 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]]
     [::logic/drop]))

  (testing "another basic peak test"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 * * 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 * 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 * 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 4 4 0 0 0 0 0 0]
      [0 2 2 0 0 0 0 0 0 0 -> 0 2 2 4 0 0 0 0 0 0]
      [0 2 2 0 0 0 0 0 0 0 -> 0 2 2 4 0 0 0 0 0 0]]
     [::logic/drop]))

  (testing "when there are peaks"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 * 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 * * 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 * 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 3 0 0 0 1]
      [4 0 0 0 0 0 0 0 0 1 -> 4 0 0 0 0 3 3 0 0 1]
      [4 0 3 3 3 0 5 0 0 1 -> 4 0 3 3 3 3 5 0 0 1]
      [4 4 0 3 0 0 5 5 5 1 -> 4 4 0 3 0 0 5 5 5 1]]

     [::logic/drop])))

(deftest game-grid-peaks-test
  (testing "empty grid"
    ;; Imagine there is a line of filled cells below the baseline :-)
    (is (= (repeat 10 logic/visible-grid-height)
           (logic/peaks [[0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]]))))

  (testing "full grid"
    (is (= [0 0 0 0 0 0 0 0 0 0]
           (logic/peaks [[0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]]))))

  (testing "partial grid"
    (is (= [20 15 13 12 10 10 10 10 11 8]
           (logic/peaks [[0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 1]
                         [0 0 0 0 0 0 0 0 0 1]
                         [0 0 0 0 4 4 4 3 0 1]
                         [0 0 0 0 4 0 3 3 3 1]
                         [0 0 0 2 2 2 2 2 2 2]
                         [0 0 5 2 2 2 2 2 2 2]
                         [0 0 5 2 2 2 2 2 2 2]
                         [0 5 5 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]])))))

(deftest extents-of-current-tetrimino-test
  (is (= [[5 12] [6 11]]
         (logic/extents-of-current-tetrimino [[3 0]
                                              [3 3]
                                              [3 0]]
                                             [10 5]))))

(deftest tetrimino-crosses-baseline?-test
  (testing "within the game-grid"
    (is (false? (logic/tetrimino-crosses-baseline? {:current-tetrimino [[2 2]
                                                                        [2 2]]
                                                    :player-row-col [0 0]}))))
  (testing "on the baseline"
    (is (false? (logic/tetrimino-crosses-baseline? {:current-tetrimino [[2 2]
                                                                        [2 2]]
                                                    :player-row-col [18 0]}))))
  (testing "crossing the baseline"
    (is (true? (logic/tetrimino-crosses-baseline? {:current-tetrimino [[2 2]
                                                                       [2 2]]
                                                   :player-row-col [19 0]})))))

(deftest tetrimino-collides-with-peaks?-test
  (testing "empty grid"
    (testing "when strictly within it"
      (is (false? (logic/tetrimino-collides-with-peaks-below-it?
                   {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]]

                    :current-tetrimino [[3 0]
                                        [3 3]
                                        [3 0]]

                    :player-row-col [4 5]}))))

    (testing "when adjacent to base of grid"
      (is (false? (logic/tetrimino-collides-with-peaks-below-it?
                   {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]]

                    :current-tetrimino [[3 0]
                                        [3 3]
                                        [3 0]]

                    :player-row-col [17 5]}))))

    (testing "when current position and orientation of tetrimino would make it cross baseline of game-grid"
      (is (true? (logic/tetrimino-collides-with-peaks-below-it?
                  {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]
                               [0 0 0 0 0 0 0 0 0 0]]

                   :current-tetrimino [[3 0]
                                       [3 3]
                                       [3 0]]

                   :player-row-col [19 0]})))))

  (testing "simple collision"
    (is (true? (logic/tetrimino-collides-with-peaks-below-it?
                {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 1]
                             [0 0 0 0 0 0 0 0 0 1]
                             [0 0 0 0 4 4 4 3 0 1]
                             [0 0 0 0 4 0 3 3 3 1]
                             [0 0 0 2 2 2 2 2 2 2]
                             [0 0 5 2 2 2 2 2 2 2]
                             [0 0 5 2 2 2 2 2 2 2]
                             [0 5 5 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]]

                 :current-tetrimino [[3 0]
                                     [3 3]
                                     [3 0]]

                 :player-row-col [9 4]}))))

  (testing "all possible adjacencies with peaks"
    (is (every? #(false? (logic/tetrimino-collides-with-peaks-below-it?
                          {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 1]
                                       [0 0 0 0 0 0 0 0 0 1]
                                       [0 0 0 0 4 4 4 3 0 1]
                                       [0 0 0 0 4 0 3 3 3 1]
                                       [0 0 0 2 2 2 2 2 2 2]
                                       [0 0 5 2 2 2 2 2 2 2]
                                       [0 0 5 2 2 2 2 2 2 2]
                                       [0 5 5 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]]

                           :current-tetrimino [[3 0]
                                               [3 3]
                                               [3 0]]

                           :player-row-col %}))
                [[13 0] [11 1] [10 2] [8 3] [7 4] [7 5] [7 6] [7 7] [6 8]])))

  (testing "earliest collisions with peaks"
    (is (every? #(true? (logic/tetrimino-collides-with-peaks-below-it?
                         {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 1]
                                      [0 0 0 0 0 0 0 0 0 1]
                                      [0 0 0 0 4 4 4 3 0 1]
                                      [0 0 0 0 4 0 3 3 3 1]
                                      [0 0 0 2 2 2 2 2 2 2]
                                      [0 0 5 2 2 2 2 2 2 2]
                                      [0 0 5 2 2 2 2 2 2 2]
                                      [0 5 5 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]]

                          :current-tetrimino [[3 0]
                                              [3 3]
                                              [3 0]]

                          :player-row-col %}))
                [[14 0] [12 1] [11 2] [9 3] [8 4] [8 5] [8 6] [8 7] [7 8]]))))

(deftest game-over?-test
  (testing "when the next tetrimino is just entering in *and* adjacent to a peak in the game grid"
    (is (true? (logic/game-over? {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [1 0 0 0 0 0 0 0 0 0]
                                              [3 0 0 0 0 0 0 0 0 0]
                                              [3 3 0 0 0 0 0 0 0 0]
                                              [3 0 0 0 0 0 0 0 0 0]]

                                  :current-tetrimino [[1]
                                                      [1]
                                                      [1]
                                                      [1]]

                                  :player-row-col [-2 0]}))))

  (testing "when the tetrimino is at row 0 *and* adjacent to a peak in the game grid"
    (is (true? (logic/game-over? {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [0 0 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]
                                              [2 2 0 0 0 0 0 0 0 0]]

                                  :current-tetrimino [[3 0]
                                                      [3 3]
                                                      [3 0]]

                                  :player-row-col [0 0]})))))

(deftest clearing-complete-rows-test
  (testing "dropping"
    (testing "on to baseline"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 * * 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 * * 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 3 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 1]
        [1 1 1 1 3 3 3 0 0 1 -> 0 0 0 0 0 0 0 0 0 1]
        [2 2 2 2 2 2 2 0 0 2 -> 0 0 0 0 0 3 0 0 0 1]
        [2 2 2 2 2 2 2 0 0 2 -> 1 1 1 1 3 3 3 0 0 1]]
       [::logic/drop]))

    (testing "above baseline"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 * * 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 * * 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 3 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 1]
        [1 1 1 1 3 3 3 0 0 1 -> 0 0 0 0 0 0 0 0 0 1]
        [2 2 2 2 2 2 2 0 0 2 -> 0 0 0 0 0 3 0 0 0 1]
        [2 2 2 2 2 2 2 0 0 2 -> 1 1 1 1 3 3 3 0 0 1]
        [2 2 0 3 0 2 2 3 3 3 -> 2 2 0 3 0 2 2 3 3 3]
        [2 2 3 3 3 2 2 0 3 0 -> 2 2 3 3 3 2 2 0 3 0]]
       [::logic/drop])))

  (testing "moving down"
    (testing "on to baseline"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 3 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 1]
        [1 1 1 1 3 3 3 * * 1 -> 0 0 0 0 0 0 0 0 0 1]
        [2 2 2 2 2 2 2 * * 2 -> 0 0 0 0 0 3 0 0 0 1]
        [2 2 2 2 2 2 2 0 0 2 -> 1 1 1 1 3 3 3 0 0 1]]
       [::logic/move-down]))

    (testing "above baseline"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 3 0 0 0 1 -> 0 0 0 0 0 0 0 0 0 1]
        [1 1 1 1 3 3 3 * * 1 -> 0 0 0 0 0 0 0 0 0 1]
        [2 2 2 2 2 2 2 * * 2 -> 0 0 0 0 0 3 0 0 0 1]
        [2 2 2 2 2 2 2 0 0 2 -> 1 1 1 1 3 3 3 0 0 1]
        [2 2 0 3 0 2 2 3 3 3 -> 2 2 0 3 0 2 2 3 3 3]
        [2 2 3 3 3 2 2 0 3 0 -> 2 2 3 3 3 2 2 0 3 0]]
       [::logic/move-down]))))

(deftest lazyness-bug-repro-test
  ;; class clojure.lang.LazySeq cannot be cast to class clojure.lang.Associative
  ;; Blame and visit commit to view fix
  (testing "laziness bug coverage"
    (with-redefs [logic/entry-column-for-tetrimino (constantly 0)
                  logic/random-tetrimino (constantly [[3 0]
                                                      [3 3]
                                                      [3 0]])]
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 3 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 1 1 1 1 1 1 1 1 -> 2 2 0 0 0 0 0 0 0 0]]
       [::logic/move-down
        ::logic/move-down]))))

(deftest new-tetriminos-positioned-at-base-of-lead-in-rows-test
  (with-redefs [logic/entry-column-for-tetrimino (constantly 0)]
    (testing ":tetrimino/I"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/I 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 1 1 1 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/I 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down])))

    (testing ":tetrimino/O)"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/O 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down])))

    (testing ":tetrimino/T"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/T 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 3 3 3 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/T 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 3 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 3 3 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 3 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/T 2]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 3 3 3 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/T 3]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 3 3 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down])))

    (testing ":tetrimino/L"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/L 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 4 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/L 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 4 4 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/L 2]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 4 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 4 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 4 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/L 3]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 4 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 4 4 4 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/I 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down])))

    (testing ":tetrimino/J"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/J 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 5 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 5 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 5 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/J 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 5 5 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/J 2]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 5 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/J 3]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 5 5 5 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 5 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/I 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down])))

    (testing ":tetrimino/S"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/S 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 6 6 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 6 6 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/S 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 6 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 6 6 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 6 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/I 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down])))

    (testing ":tetrimino/Z"
      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/Z 0]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 7 7 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 7 7 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/Z 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 7 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 7 7 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 7 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down]))

      (with-redefs [logic/random-tetrimino (constantly (get-in logic/tetrimino-shapes [:tetrimino/I 1]))]
        (check-scenario
         [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 1 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
          [* * 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]
          [0 0 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
         [::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down
          ::logic/move-down])))))

(deftest game-play-keys-should-be-noops-unless-game-state-is-playing-test
  (with-redefs [logic/entry-column-for-tetrimino (constantly 5)
                logic/entry-row-for-tetrimino (constantly 5)
                logic/random-tetrimino (constantly [[3 0]
                                                    [3 3]
                                                    [3 0]])]
    (let [{:keys [current-tetrimino player-row-col game-status] :as game-state} (logic/initial-game-state)]
      (testing "sanity of initialisation"
        (is (= current-tetrimino [[3 0]
                                  [3 3]
                                  [3 0]]))
        (is (= player-row-col [5 5]))
        (is (= game-status :game-status/initialised)))

      (testing "all game play events are noops"
        (doseq [move [::logic/move-left
                      ::logic/move-right
                      ::logic/move-down
                      ::logic/drop
                      ::logic/rotate]]
          (is (= (select-keys game-state [:current-tetrimino
                                          :player-row-col
                                          :game-status])
                 (select-keys (logic/handle-events game-state [move]) [:current-tetrimino
                                                                       :player-row-col
                                                                       :game-status]))))))))

(deftest get-cells-test
  (is (= [5 0] (logic/get-cells [[0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 0 0 0 0 0 0]
                                 [0 0 0 0 5 0 0 0 0 0]
                                 [0 0 0 0 5 0 0 0 0 0]
                                 [0 0 0 5 5 0 0 0 0 0]
                                 [0 0 0 4 4 4 4 0 0 1]
                                 [0 4 4 4 4 0 0 0 0 1]
                                 [2 2 0 0 0 2 2 2 2 1]
                                 [2 2 0 0 0 2 2 2 2 1]]
                                15 4 2))))

(deftest tetrimino-cannot-shift-upwards?-test
  (is (true? (logic/tetrinimo-cannot-shift-upwards?
              {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 0 0 0 0 0 0]
                           [0 0 0 0 5 0 0 0 0 0]
                           [0 0 0 0 5 0 0 0 0 0]
                           [0 0 0 5 5 0 0 0 0 0]
                           [0 0 0 4 0 0 0 0 0 1]
                           [0 4 4 4 0 0 0 0 0 1]
                           [2 2 0 0 0 2 2 2 2 1]
                           [2 2 0 0 0 2 2 2 2 1]]
               :current-tetrimino [[4 4]
                                   [0 4]
                                   [0 4]]
               :player-row-col [16 4]}))))

(deftest when-a-tetrimino-is-rotated-and-has-other-tetrimino-cells-above-bug-test
  (testing "when there is insufficient space to accommodate a rotation"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 5 0 0 0 0 0 -> 0 0 0 0 5 0 0 0 0 0]
      [0 0 0 0 5 0 0 0 0 0 -> 0 0 0 0 5 0 0 0 0 0]
      [0 0 0 5 5 0 0 0 0 0 -> 0 0 0 5 5 0 0 0 0 0]
      [0 0 0 4 * * * 0 0 1 -> 0 0 0 4 4 4 4 0 0 1]
      [0 4 4 4 * 0 0 0 0 1 -> 0 4 4 4 4 0 0 0 0 1]
      [2 2 0 0 0 2 2 2 2 1 -> 2 2 0 0 0 2 2 2 2 1]
      [2 2 0 0 0 2 2 2 2 1 -> 2 2 0 0 0 2 2 2 2 1]]
     [::logic/rotate]))

  (testing "when there is space to accommodate a rotation"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 5 0 0 0 0 0 -> 0 0 0 0 5 0 0 0 0 0]
      [0 0 0 0 5 0 0 0 0 0 -> 0 0 0 0 5 0 0 0 0 0]
      [0 0 0 5 5 0 0 0 0 0 -> 0 0 0 5 5 0 0 0 0 0]
      [0 0 0 4 * * * 0 0 0 -> 0 0 0 4 4 4 0 0 0 0]
      [0 4 4 4 * 0 0 0 0 0 -> 0 4 4 4 0 4 0 0 0 0]
      [2 2 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 4 0 0 0 0]
      [2 2 0 0 0 0 0 0 0 0 -> 2 2 0 0 0 0 0 0 0 0]]
     [::logic/rotate])))

(deftest move-down-on-top-of-populated-cells-below-bug-test
  (check-scenario
   [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
    [0 0 3 0 0 0 0 0 0 0 -> 0 0 3 0 0 0 0 0 0 0]
    [0 0 3 3 * * 0 0 0 0 -> 0 0 3 3 6 6 0 0 0 0]
    [2 2 3 * * 0 0 0 0 0 -> 2 2 3 6 6 0 0 0 0 0]
    [1 1 1 1 0 0 0 0 0 0 -> 1 1 1 1 0 0 0 0 0 0]]
   [::logic/move-down]))
