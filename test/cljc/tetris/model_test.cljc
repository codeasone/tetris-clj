(ns tetris.model-test
  (:require #?(:clj [clojure.test :refer :all]
               :cljs [cljs.test :refer :all :include-macros true])
            [tetris.model :as model]))

(defn tetrimino-to-coords [tetrimino]
  (->> tetrimino
       (map-indexed (fn [row-idx row]
                      (map (fn [col-idx]
                             [row-idx col-idx])
                           (keep-indexed (fn [idx elem] (when (pos? elem) idx)) row))))
       (reduce concat)))

(deftest tetrimino-to-coords-test
  (is (= [[0 0] [0 1] [1 1] [1 2]]
         (tetrimino-to-coords [[7 7 0]
                               [0 7 7]])))
  (is (= [[0 0] [0 1] [1 0] [1 1]]
         (tetrimino-to-coords [[2 2]
                               [2 2]])))
  (is (= [[0 0] [0 1] [1 1] [2 1]]
         (tetrimino-to-coords [[4 4]
                               [0 4]
                               [0 4]])))
  (is (= [[0 0] [0 1] [0 2] [0 3]]
         (tetrimino-to-coords [[1, 1, 1, 1]])))
  (is (= [[0 0] [1 0] [2 0] [3 0]]
         (tetrimino-to-coords [[1]
                               [1]
                               [1]
                               [1]]))))

(def tetrimino-shape-normalised-coords
  (reduce-kv
   (fn [acc type tetriminos]
     (assoc acc type (mapv tetrimino-to-coords tetriminos)))
   {}
   model/tetrimino-shapes))

(defn- game-state-from-before-grid
  [test-grid]
  (let [game-grid (mapv (fn [row]
                          (mapv (fn [ev] (if (= ev *) 0 ev)) row)) test-grid)
        current-tetrimino-coords
        (->> test-grid
             flatten
             (keep-indexed (fn [idx elem] (when (= elem *) idx)))
             (mapv (fn [idx] [(unchecked-divide-int idx model/grid-width) (rem idx model/grid-width)])))
        row-offset (apply min (mapv first current-tetrimino-coords))
        col-offset (apply min (mapv second current-tetrimino-coords))
        player-row-col [row-offset col-offset]
        normalised-tetrimino-coords (mapv (fn [[row col]]
                                            [(- row row-offset)
                                             (- col col-offset)]) current-tetrimino-coords)
        current-tetrimino-type (key (first (filter (fn [[_ tetriminos]]
                                                     ((set tetriminos) normalised-tetrimino-coords))
                                                   tetrimino-shape-normalised-coords)))
        current-tetrimino-idx (first (keep-indexed (fn [idx elem] (when (= elem normalised-tetrimino-coords) idx))
                                                   (get tetrimino-shape-normalised-coords
                                                        current-tetrimino-type)))]
    {:game-grid game-grid
     :current-tetrimino (get-in model/tetrimino-shapes [current-tetrimino-type current-tetrimino-idx])
     :player-row-col player-row-col}))

(deftest game-state-from-before-grid-test
  (testing "within empty game-grid context"
    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]]
            :current-tetrimino [[1]
                                [1]
                                [1]
                                [1]]
            :player-row-col [0 0]}
           (game-state-from-before-grid [[* 0 0 0 0 0 0 0 0 0]
                                         [* 0 0 0 0 0 0 0 0 0]
                                         [* 0 0 0 0 0 0 0 0 0]
                                         [* 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]]
            :current-tetrimino [[7 7 0]
                                [0 7 7]]
            :player-row-col [2 3]}
           (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 * * 0 0 0 0 0]
                                         [0 0 0 0 * * 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]]
            :current-tetrimino [[2 2]
                                [2 2]]
            :player-row-col [18 8]}
           (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 * *]
                                         [0 0 0 0 0 0 0 0 * *]]))))

  (testing "within partially populated game-grid context"
    (is (= {:game-grid [[0 1 1 1 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [0 1 1 1 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]
                        [2 2 2 2 0 0 0 0 0 0]]
            :current-tetrimino [[1]
                                [1]
                                [1]
                                [1]]
            :player-row-col [0 0]}
           (game-state-from-before-grid [[* 1 1 1 0 0 0 0 0 0]
                                         [* 1 1 1 0 0 0 0 0 0]
                                         [* 1 1 1 0 0 0 0 0 0]
                                         [* 1 1 1 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]
                                         [2 2 2 2 0 0 0 0 0 0]])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 7 7 0 0 0 0 0 0 0]
                        [0 0 7 7 0 0 0 0 0 0]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]
                        [2 2 2 2 2 2 2 2 2 2]]
            :current-tetrimino [[7 7 0]
                                [0 7 7]]
            :player-row-col [2 3]}
           (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 7 7 * * 0 0 0 0 0]
                                         [0 0 7 7 * * 0 0 0 0]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]
                                         [2 2 2 2 2 2 2 2 2 2]])))

    (is (= {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 0 0 0 0]
                        [0 0 0 0 0 0 2 2 0 0]
                        [0 0 0 0 0 0 2 2 0 0]]
            :current-tetrimino [[2 2]
                                [2 2]]
            :player-row-col [18 8]}
           (game-state-from-before-grid [[0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 0 0 0 0]
                                         [0 0 0 0 0 0 2 2 * *]
                                         [0 0 0 0 0 0 2 2 * *]])))))

;; Credit: phind.com > debugged by me 🤯
(defmacro check-scenario [before->after events]
  (let [before-grid (mapv #(mapv (fn [x] (if (= x '*) '* x)) %)
                          (mapv (fn [row] (take-while #(not= % '->) row)) before->after))
        after-grid (mapv #(drop-while (fn [token] (not= token '->)) %) before->after)
        after-grid (mapv #(into [] (rest %)) after-grid)]
    `(is (= ~after-grid
            (model/compose-current-tetrimino-into-game-grid (model/handle-events (game-state-from-before-grid
                                                                                  ~before-grid)
                                                                                 ~events))))))

(comment
  (macroexpand '(check-scenario
                 [[* * * * 0 0 0 0 0 0 -> 0 1 1 1 1 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
                  [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
                 [:key-input/right])))

(deftest moving-current-tetrimino-test
  (testing "basic positive test"
    (check-scenario
     [[* * * * 0 0 0 0 0 0 -> 0 0 1 1 1 1 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
     [::model/move-right
      ::model/move-right]))

  (testing "boundary limits"
    (testing "at rhs"
      (check-scenario
       [[0 0 0 0 0 0 0 * * * -> 0 0 0 0 0 0 0 3 3 3]
        [0 0 0 0 0 0 0 0 * 0 -> 0 0 0 0 0 0 0 0 3 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::model/move-right]))

    (testing "at lhs"
      (check-scenario
       [[* * * 0 0 0 0 0 0 0 -> 3 3 3 0 0 0 0 0 0 0]
        [0 * 0 0 0 0 0 0 0 0 -> 0 3 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
       [::model/move-left]))

    (testing "at bottom"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 * * * 0 0 0 0 -> 0 0 0 3 3 3 0 0 0 0]
        [0 0 0 0 * 0 0 0 0 0 -> 0 0 0 0 3 0 0 0 0 0]]
       [::model/move-down]))))

(deftest rotating-current-tetrmino-test
  (testing "when rotation requires horizontal repositioning"
    (check-scenario
     [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 1 1 1 1]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 * -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
      [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]]
     [::model/rotate-current]))

  (testing "when rotation requires vertical repositioning"
    (testing "in empty grid"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 3 0 0 0 0]
        [0 0 0 0 * * * 0 0 0 -> 0 0 0 0 3 3 0 0 0 0]
        [0 0 0 0 0 * 0 0 0 0 -> 0 0 0 0 0 3 0 0 0 0]]
       [::model/rotate-current]))

    (testing "when adjacent to some peaks"
      (check-scenario
       [[0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 0 0 0 0 0 0]
        [0 0 0 0 0 0 0 0 0 0 -> 0 0 0 0 3 0 0 0 0 0]
        [0 0 0 0 0 * 0 0 0 1 -> 0 0 0 0 3 3 0 0 0 1]
        [0 0 0 0 * * * 0 0 1 -> 0 0 0 0 3 0 0 0 0 1]
        [0 0 0 0 4 4 4 3 0 1 -> 0 0 0 0 4 4 4 3 0 1]
        [0 0 0 0 4 0 3 3 3 1 -> 0 0 0 0 4 0 3 3 3 1]
        [0 0 0 2 2 2 2 2 2 2 -> 0 0 0 2 2 2 2 2 2 2]
        [0 0 5 2 2 2 2 2 2 2 -> 0 0 5 2 2 2 2 2 2 2]
        [0 0 5 2 2 2 2 2 2 2 -> 0 0 5 2 2 2 2 2 2 2]
        [0 5 5 2 2 2 2 2 2 2 -> 0 5 5 2 2 2 2 2 2 2]]
       [::model/rotate-current]))))

(deftest game-grid-peaks-test
  (testing "empty grid"
    (is (= [nil nil nil nil nil nil nil nil nil nil]
           (model/peaks [[0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]]))))

  (testing "full grid"
    (is (= [0 0 0 0 0 0 0 0 0 0]
           (model/peaks [[2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]
                         [2 2 2 2 2 2 2 2 2 2]]))))

  (testing "partial grid"
    (is (= [nil 15 13 12 10 10 10 10 11 8]
           (model/peaks [[0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 0]
                         [0 0 0 0 0 0 0 0 0 1]
                         [0 0 0 0 0 0 0 0 0 1]
                         [0 0 0 0 4 4 4 3 0 1]
                         [0 0 0 0 4 0 3 3 3 1]
                         [0 0 0 2 2 2 2 2 2 2]
                         [0 0 5 2 2 2 2 2 2 2]
                         [0 0 5 2 2 2 2 2 2 2]
                         [0 5 5 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]
                         [0 2 2 2 2 2 2 2 2 2]])))))

(deftest extents-of-current-tetrimino-test
  (is (= [[5 12] [6 11]]
         (model/extents-of-current-tetrimino [[3 0]
                                              [3 3]
                                              [3 0]]
                                             [10 5]))))

(deftest tetrimino-crosses-baseline?-test
  (is (false? (model/tetrimino-crosses-baseline? {:current-tetrimino [[2 2]
                                                                      [2 2]]
                                                  :player-row-col [0 0]})))
  (is (true? (model/tetrimino-crosses-baseline? {:current-tetrimino [[2 2]
                                                                     [2 2]]
                                                 :player-row-col [19 0]}))))

(deftest tetrimino-collides-with-peaks?-test
  (testing "empty grid"
    (testing "when strictly within it"
      (is (false? (model/tetrimino-collides-with-peaks?
                   {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]]

                    :current-tetrimino [[3 0]
                                        [3 3]
                                        [3 0]]

                    :player-row-col [4 5]}))))

    (testing "when adjacent to base of grid"
      (is (false? (model/tetrimino-collides-with-peaks?
                   {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]]

                    :current-tetrimino [[3 0]
                                        [3 3]
                                        [3 0]]

                    :player-row-col [17 5]}))))

    (testing "helper is not concerned about enforcing containment"
      (is (false? (model/tetrimino-collides-with-peaks?
                   {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]
                                [0 0 0 0 0 0 0 0 0 0]]

                    :current-tetrimino [[3 0]
                                        [3 3]
                                        [3 0]]

                    :player-row-col [19 0]})))))

  (testing "simple collision"
    (is (true? (model/tetrimino-collides-with-peaks?
                {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 0]
                             [0 0 0 0 0 0 0 0 0 1]
                             [0 0 0 0 0 0 0 0 0 1]
                             [0 0 0 0 4 4 4 3 0 1]
                             [0 0 0 0 4 0 3 3 3 1]
                             [0 0 0 2 2 2 2 2 2 2]
                             [0 0 5 2 2 2 2 2 2 2]
                             [0 0 5 2 2 2 2 2 2 2]
                             [0 5 5 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]
                             [0 2 2 2 2 2 2 2 2 2]]

                 :current-tetrimino [[3 0]
                                     [3 3]
                                     [3 0]]

                 :player-row-col [9 4]}))))

  (testing "all possible adjacencies with peaks"
    (is (every? #(false? (model/tetrimino-collides-with-peaks?
                          {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 0]
                                       [0 0 0 0 0 0 0 0 0 1]
                                       [0 0 0 0 0 0 0 0 0 1]
                                       [0 0 0 0 4 4 4 3 0 1]
                                       [0 0 0 0 4 0 3 3 3 1]
                                       [0 0 0 2 2 2 2 2 2 2]
                                       [0 0 5 2 2 2 2 2 2 2]
                                       [0 0 5 2 2 2 2 2 2 2]
                                       [0 5 5 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]
                                       [0 2 2 2 2 2 2 2 2 2]]

                           :current-tetrimino [[3 0]
                                               [3 3]
                                               [3 0]]

                           :player-row-col %}))
                [[13 0] [11 1] [10 2] [8 3] [7 4] [7 5] [7 6] [7 7] [6 8]])))

  (testing "earliest collisions with peaks"
    (is (every? #(true? (model/tetrimino-collides-with-peaks?
                         {:game-grid [[0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 0]
                                      [0 0 0 0 0 0 0 0 0 1]
                                      [0 0 0 0 0 0 0 0 0 1]
                                      [0 0 0 0 4 4 4 3 0 1]
                                      [0 0 0 0 4 0 3 3 3 1]
                                      [0 0 0 2 2 2 2 2 2 2]
                                      [0 0 5 2 2 2 2 2 2 2]
                                      [0 0 5 2 2 2 2 2 2 2]
                                      [0 5 5 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]
                                      [0 2 2 2 2 2 2 2 2 2]]

                          :current-tetrimino [[3 0]
                                              [3 3]
                                              [3 0]]

                          :player-row-col %}))
                [[14 0] [12 1] [11 2] [9 3] [8 4] [8 5] [8 6] [8 7] [7 8]]))))
